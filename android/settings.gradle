rootProject.name = 'rahdar'

// üõ†Ô∏è Fun√ß√£o para resolver o caminho com seguran√ßa
def resolvePackagePath(String packageName) {
  try {
    def path = ["node", "--print", "require.resolve('${packageName}/package.json')"]
      .execute(null, rootDir)
      .text
      .trim()
    return new File(path).getParentFile()
  } catch (Exception e) {
    println("‚ö†Ô∏è Falha ao resolver o pacote: ${packageName}")
    return null
  }
}

// üì¶ expo
def expoPath = resolvePackagePath("expo")
if (expoPath != null) {
  def autolinkingGradle = new File(expoPath, "../scripts/autolinking.gradle")
  if (autolinkingGradle.exists()) {
    apply from: autolinkingGradle
    useExpoModules()
  }
}

// üì¶ @react-native-community/cli-platform-android
def cliPlatformAndroid = resolvePackagePath("@react-native-community/cli-platform-android")
if (cliPlatformAndroid != null) {
  def nativeModulesGradle = new File(cliPlatformAndroid, "../native_modules.gradle")
  if (nativeModulesGradle.exists()) {
    apply from: nativeModulesGradle
    applyNativeModulesSettingsGradle(settings)
  }
}

include ':app'

// üì¶ react-native-gradle-plugin
def rnGradlePlugin = resolvePackagePath("react-native-gradle-plugin")
if (rnGradlePlugin != null) {
  includeBuild(rnGradlePlugin)
}

// üì¶ Hermes e arquitetura nova
if (settings.hasProperty("newArchEnabled") && settings.newArchEnabled == "true") {
  def reactNativePath = resolvePackagePath("react-native")
  if (reactNativePath != null) {
    include(":ReactAndroid")
    project(":ReactAndroid").projectDir = new File(reactNativePath, "../ReactAndroid")

    include(":ReactAndroid:hermes-engine")
    project(":ReactAndroid:hermes-engine").projectDir = new File(reactNativePath, "../ReactAndroid/hermes-engine")
  }
}
